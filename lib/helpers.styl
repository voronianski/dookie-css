/**
 * COMMON HELPERS
 */

block()
	display: block

inline-block()
	display: inline-block
	display: -moz-inline-stack
	vertical-align: baseline

	if ie-support
		zoom: 1
		*display: inline
		*vertical-align: auto;

hide()
	display: none

/*
 * Text decoration mixins
 */
upcase()
	text-transform: uppercase

lowcase()
	text-transform: lowercase

nodecorate()
	text-decoration: none

underline()
	text-decoration: underline

/*
 * Font style mixins and simplifiers
 * e.g. fw: 800
 * e.g. fs: 2em
 */
fw(value)
	font-weight: value

fs(value)
	font-size: value

bold()
	font-weight: bold

italic()
	font-style: italic

normal()
	font-weight: normal
	font-style: normal

reset-case()
	text-transform: none

/*
 * Text align shorthands
 */
center()
	text-align: center

justify()
	text-align: justify

/*
 * Basic clearfix mixin
 * e.g. clearfix()
 */
clearfix()
	block()

	&:after
		content: "."
		block()
		height: 0
		clear: both
		visibility: hidden

/*
 * Size mixin
 * e.g size: 20px 10px => width: 20px; height: 10px
 */
size(numbers...)
	parsed = unit(numbers[0])
	type = match('^[^%]*%[^%]*$', parsed) ? '%' : 'px'

	if length(numbers) > 1
		parsedH = unit(numbers[1])
		typeH = match('^[^%]*%[^%]*$', parsedH) ? '%' : 'px'

		width: unit(numbers[0], type)
		height: unit(numbers[1], typeH)
	else
		width: unit(numbers, type)
		height: unit(numbers, type)

/*
 * Position helper
 */
-pos(type, args)
	i = 0
	position: unquote(type)
	if args
		{args[i]}: args[i + 1] is a 'unit' ? args[i += 1] : 0
		{args[i += 1]}: args[i + 1] is a 'unit' ? args[i += 1] : 0

/*
 * Position mixins
 * e.g. absolute: top 5px left 40px
 */
absolute()
	-pos('absolute', arguments)

relative()
	-pos('relative', arguments)

fixed()
	-pos('fixed', arguments)

static()
	-pos('static', arguments)

/*
 * Prefix helper
 * e.g. -prefix(border-radius, 3px) => all vendor list (check 'settings') based properties
 */
-prefix(prop, val)
	for prefix in vendors
		if prefix == official
			{prop}: val
		else
			-{prefix}-{prop}: val

/*
 * Joins a few literals together into one string
 */
literal-join(string, literals)
	result = unquote('')
	first = true
	for args in literals
		subresult = unquote('')
	for arg in args
		subresult = subresult arg
	if first
		result = subresult
		first = false
	else
		result = s('%s%s%s', result, unquote(string), subresult)
	return result

/*
 * Background mixin
 * e.g. bg: 'logo.png' (with specified img-path in 'settings')
 * e.g. bg: '../img/logo.png' 100px 50px
 */
bg(path, args...)
	args = unquote('no-repeat') unless args
	background: url(img-path path) args

/*
 * Background mixin for retina displays
 *
 * use it together with '@media all and (-webkit-min-device-pixel-ratio: 1.5)'
 */
bg-retina(path, args...)
	bg: path, args
	background-size: contain

/*
 * Image replacing mixin
 * uses stylus' built-in image-size() does not support JPEG yet
 * set dimensions by hand to use all formats and not depend on original
 * e.g. image-block: 'test.png'
 * e.g. image-block: 'test.jpg' 300 200
 */
image-block(path, dimensions...)
	url = img-path + path

	bg(path) if path
	font: 0/0 a
	text-shadow: none
	color: transparent
	if length(dimensions) > 0
		size: dimensions
	else
		size: image-size(url)[0] image-size(url)[1]

/*
 * Sprite mixins
 * @param 'path' - sprite image path
 * @param 'grid' - your sprite grid step (can be with gridX & gridY)
 * @param, 'x', 'y' -  square counts starting from 0
 * e.g. sprite: 1, 5, 32px
 */
-sprite(x = 0, y = 0, grid...)
	if length(grid) > 1
		background-position: unit(x*grid[0]*-1, px) unit(y*grid[1]*-1, px)
	else
		background-position: unit(x*grid*-1, px) unit(y*grid*-1, px)

// basic sprite mixin
// e.g. sprite-grid: 'test.png' 1 5 16px 24px
sprite-grid(path, x = 0, y = 0, grid...)
	bg: path
	-sprite: x y grid

// mixin that replaces text with an icon
// e.g. sprite-replace: 'test.png' 1 5 16px 24px
sprite-replace(path, x = 0, y = 0, grid...)
	bg: path
	-sprite: x y grid
	text-indent: -999em
	letter-spacing: -999em
	overflow: hidden

// mixin for inline icons
// e.g. sprite-inline: 'test.png' 1 5 18px 18px 16px 24px
sprite-inline(path, x = 0, y = 0, width, height, grid...)
	&:before
		inline-block()
		bg: path
		-sprite: x y grid
		content: ''
		size: width height

// mixin for padded icons
// e.g. sprite-padded: 'test.png' 1 5 18px 18px 10px 5px 32px
sprite-padded(path, x = 0, y = 0, width, height, top, left, grid...)
	&:before
		absolute: top left
		bg: path
		-sprite: x y grid
		content: ''
		size: width height

/*
 * Make single text line overflow
 * e.g. text-overflow: 200 ellipsis
 */
text-overflow(width, type = ellipsis)
	text-overflow: type
	white-space: nowrap
	overflow: hidden
	width: unit(width)

/*
 * Hiding text mixin
 * e.g. text-hide()
 */
text-hide()
	text-indent: -9999px
	white-space: nowrap
	overflow: hidden

/*
 * Disallow user to select element
 * e.g. no-select()
 */
no-select()
	-webkit-touch-callout: none
	-prefix(user-select, none)

/*
 * Creates triangle
 * possible directions 'up', 'down', 'left', 'right'
 * e.g. triangle: down 15px #F80
 */
triangle(direction = up, size = 10px, color = #000)
	width: 0
	height: 0

	if direction == up
		border-left: size solid transparent
		border-right: size solid transparent
		border-bottom: size solid color
	else if direction == down
		border-left: size solid transparent
		border-right: size solid transparent
		border-top: size solid color
	else if direction == left
		border-top: size solid transparent
		border-bottom: size solid transparent
		border-right: size solid color
	else if direction == right
		border-top: size solid transparent
		border-bottom: size solid transparent
		border-left: size solid color

/*
 * Opacity mixin
 * e.g. opacity: .5
 */
opacity(opacity)
	filter: s("alpha(opacity = %s)", opacity * 100) if ie-support
	opacity: opacity

/*
 * Full rounded corners mixins
 * e.g. round()
 */
round()
	-prefix(border-radius, 100%)

/*
 * Custom animation timing functions
 * http://www.ui-transitions.com/
 */
// ease-in
ease-in-quad = cubic-bezier(0.550,  0.085, 0.680, 0.530)
ease-in-cubic = cubic-bezier(0.550,  0.055, 0.675, 0.190)
ease-in-quart = cubic-bezier(0.895,  0.030, 0.685, 0.220)
ease-in-quint = cubic-bezier(0.755,  0.050, 0.855, 0.060)
ease-in-sine = cubic-bezier(0.470,  0.000, 0.745, 0.715)
ease-in-expo = cubic-bezier(0.950,  0.050, 0.795, 0.035)
ease-in-circ = cubic-bezier(0.600,  0.040, 0.980, 0.335)
ease-in-back = cubic-bezier(0.600, -0.280, 0.735, 0.045)

// ease-out
ease-out-quad = cubic-bezier(0.250,  0.460, 0.450, 0.940)
ease-out-cubic = cubic-bezier(0.215,  0.610, 0.355, 1.000)
ease-out-quart = cubic-bezier(0.165,  0.840, 0.440, 1.000)
ease-out-quint = cubic-bezier(0.230,  1.000, 0.320, 1.000)
ease-out-sine = cubic-bezier(0.390,  0.575, 0.565, 1.000)
ease-out-expo = cubic-bezier(0.190,  1.000, 0.220, 1.000)
ease-out-circ = cubic-bezier(0.075,  0.820, 0.165, 1.000)
ease-out-back = cubic-bezier(0.175,  0.885, 0.320, 1.275)

// ease-in-out
ease-in-out-quad = cubic-bezier(0.455,  0.030, 0.515, 0.955)
ease-in-out-cubic = cubic-bezier(0.645,  0.045, 0.355, 1.000)
ease-in-out-quart = cubic-bezier(0.770,  0.000, 0.175, 1.000)
ease-in-out-quint = cubic-bezier(0.860,  0.000, 0.070, 1.000)
ease-in-out-sine = cubic-bezier(0.445,  0.050, 0.550, 0.950)
ease-in-out-expo = cubic-bezier(1.000,  0.000, 0.000, 1.000)
ease-in-out-circ = cubic-bezier(0.785,  0.135, 0.150, 0.860)
ease-in-out-back = cubic-bezier(0.680, -0.550, 0.265, 1.550)
