/**
 * GRADIENTS
 */

/*
 * Specific helpers ported from Nib
 * https://github.com/visionmedia/nib
 */

gradients()
	// Replace the given str with val in the expr.
	replace(expr, str, val)
		expr = clone(expr)
		for e, i in expr
			if length(e) > 1
				expr[i] = replace(e, str, val)
			else
				if str == e
					expr[i] = val
		expr

	// Normalize gradient points.
	grad-point(pos)
		if length(pos) == 1
			return left pos if pos in (top bottom)
			return pos top if pos in (left right)
		else if pos[0] in (top bottom)
			pos[1] pos[0]
		else
			pos

	// Implicit color stop position.
	pos-in-stops(i, stops)
		len = length(stops)
		if len - 1 == i
			100%
		else if i
			unit(i / len * 100, '%')
		else
			0%

	// Normalize color stops:
	// - (color pos) -> (pos color)
	// - (color) -> (implied-pos color)
	normalize-stops(stops)
		stops = clone(stops)
		for stop, i in stops
			if length(stop) == 1
				color = stop[0]
				stop[0] = pos-in-stops(i, stops)
				stop[1] = color
			else if typeof(stop[1]) == 'unit'
				pos = stop[1]
				stop[1] = stop[0]
				stop[0] = pos
		stops

	// Join color stops with the given translation function.
	join-stops(stops, translate)
		str = ''
		len = length(stops)
		for stop, i in stops
			str += ', ' if i
			pos = stop[0]
			color = stop[1]
			str += translate(color, pos)
		unquote(str)

	// Legacy Webkit color stop.
	webkit-stop(color, pos)
		'color-stop(%d, %s)' % (pos / 100 color)

	// Standard color stop.
	std-stop(color, pos)
		'%s %s' % (color pos)

	/*
	 * Linear gradient mixin
	 * e.g. background-image: linear-gradient(bottom, red, green 50%, blue)
	 */
	linear-gradient(start, stops...)
		error('color stops required') unless length(stops)
		prop = current-property[0]
		val = current-property[1]

		if start is a 'color'
			unshift(stops, start)
			start = top

		stops = normalize-stops(stops)

		if start[0] is a 'unit'
			start = start[1]

		end = grad-point(opposite-position(start))
		webkit-legacy = '-webkit-gradient(linear, %s, %s, %s)' % (grad-point(start) end join-stops(stops, webkit-stop))
		add-property(prop, replace(val, '__CALL__', webkit-legacy))

		stops = join-stops(stops, std-stop)
		for prefix in vendors
			unless prefix == official
				gradient = '-%s-linear-gradient(%s, %s)' % (prefix start stops)
				add-property(prop, replace(val, '__CALL__', gradient))

		'linear-gradient(%s, %s)' % (start stops)

	/*
	 * Radial gradient mixin
	 * e.g. background-image: radial-gradient(red, blue)
	 */
	radial-gradient(stops...)
		error('color stops required') unless length(stops)
		prop = current-property[0]
		val = current-property[1]

		stops = normalize-stops(stops)

		webkit-legacy = '-webkit-gradient(radial, center center 0px, center center 100%, %s, %s)' % join-stops(stops, webkit-stop)
		add-property(prop, replace(val, '__CALL__', webkit-legacy))

		stops = join-stops(stops, std-stop)
		for prefix in vendors
			unless prefix == official
				gradient = '-%s-radial-gradient(center, ellipse cover, %s)' % (prefix stops)
				add-property(prop, replace(val, '__CALL__', gradient))

		'radial-gradient(ellipse at center, %s)' % stops

	/*
	 * Simplified version of linear-gradient with 2 colors only
	 * e.g. gradient: #F9F9F9, #EAEAEA
	 */
	gradient(colors...)
		background: colors[1]
		background-image: linear-gradient(top, colors[0], colors[1])

	/*
	 * Another linear-gradient that automticly detects colors
	 * e.g. simple-gradient: #F80, 30%
	 */
	simple-gradient(color, strength = 10%)
		start = lighten(color, strength)
		end = darken(color, strength)
		gradient(start, end)
